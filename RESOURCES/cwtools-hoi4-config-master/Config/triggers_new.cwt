###All inside trigger must be true.
## scopes = { any }
# alias[trigger:and] = replace_me

###At least one entry inside trigger must be true.
## scopes = { any }
# alias[trigger:or] = replace_me

###Negates content of trigger.
## scopes = { any }
# alias[trigger:not] = replace_me

###Print message to game.log - Can be localized.
## scopes = { any }
alias[trigger:log] = localisation_inline

###Checks if scoped unit leader, ace or country is female.
## scopes = { COUNTRY UNIT_LEADER ACE }
alias[trigger:is_female] = bool

###Compares the current resistance level of a state to a value.
## scopes = { STATE }
alias[trigger:resistance] = variable_field

###Checks if a country has a captured an operative (supports scoped variables).
## scopes = { COUNTRY }
alias[trigger:has_captured_operative] = scope[country]

###Checks if a country has a captured an operative (supports scoped variables).
## scopes = { COUNTRY }
alias[trigger:has_captured_operative] = enum[country_tags]

###Checks if a country has a captured an operative (supports scoped variables).
## scopes = { COUNTRY }
alias[trigger:has_captured_operative] = bool

###Check if a state has enough non damaged buildings.
## scopes = { STATE }
alias[trigger:non_damaged_building_level] = {
	building = <building>
	level = variable_field
}

###Checks the number of days since the country last capitulated, even if it is no longer capitulated. If it has not ever capitulated, the value is extremely large. It is recommended to combine this with has_capitulated = yes when you specifically want to ignore non-active capitulations.
## scopes = { COUNTRY }
alias[trigger:days_since_capitulated] = variable_field

###Compares the current compliance level of a state to a value.
## scopes = { STATE }
alias[trigger:compliance] = variable_field

###Compares the current compliance speed of a state to a value.
## scopes = { STATE }
alias[trigger:compliance_speed] = variable_field

###Compares the current resistance speed of a state to a value.
## scopes = { STATE }
alias[trigger:resistance_speed] = variable_field

###Compares occupied country that creates resistance to a tag.
## scopes = { STATE }
alias[trigger:occupied_country_tag] = enum[country_tags]

###Compares occupied country that creates resistance to a tag.
## scopes = { STATE }
alias[trigger:occupied_country_tag] = scope[country]

###Compares the target resistance level of a state to a value.
## scopes = { STATE }
alias[trigger:resistance_target] = variable_field

###Returns true if state has a resistance.
## scopes = { STATE }
alias[trigger:has_resistance] = bool

###Returns true if state has an active resistance (above zero).
## scopes = { STATE }
alias[trigger:has_active_resistance] = bool

###Compares occupied country that creates resistance to a tag.
## scopes = { STATE }
alias[trigger:has_occupation_modifier] = <resistance_compliance_modifier>

###Returns true if game is in debug mode (launched with -debug argument).
## scopes = { any }
alias[trigger:is_debug] = bool

###Compares the core (average of all occupied states) compliance value of occupied_country_tag that is occupied by the country in current scope.
## scopes = { COUNTRY }
alias[trigger:core_compliance] = {
	occupied_country_tag = enum[country_tags]
	occupied_country_tag = scope[country]
	value = variable_field
}

###Compares the core (average of all occupied states) resistance value of occupied_country_tag that is occupied by the country in current scope.
## scopes = { COUNTRY }
alias[trigger:core_resistance] = {
	occupied_country_tag = enum[country_tags]
	occupied_country_tag = scope[country]
	value = variable_field
}

###Checks network strength you have in a country.
## scopes = { COUNTRY }
alias[trigger:network_strength] = {
	target = enum[country_tags]
	target = scope[country]
	## cardinality = 0..1
	state = <state>
	## cardinality = 0..1
	state = scope[state]
	value = variable_field
}

###Checks network strength you have in a country.
## scopes = { COUNTRY }
alias[trigger:network_strength] = {
	state = <state>
	state = scope[state]
	value = variable_field
}

###Checks if a country has a specific token against another country.
## scopes = { COUNTRY }
alias[trigger:has_operation_token] = {
	tag = scope[country]
	tag = enum[country_tags]
	token = <operation_token>
}

###Checks occupation law of state.
## scopes = { STATE }
alias[trigger:occupation_law] = <occupation_law>

###Checks if a country is ally with another country. Will check if two countries are same/in same faction/has subject master relation.
## scopes = { COUNTRY }
alias[trigger:is_ally_with] = scope[country]

###Checks if a country is ally with another country. Will check if two countries are same/in same faction/has subject master relation.
## scopes = { COUNTRY }
alias[trigger:is_ally_with] = enum[country_tags]

###Calculates the highest scored country that is defined in a country scorer and sets it to a variable.
## scopes = { COUNTRY }
alias[trigger:get_highest_scored_country_temp] = {
	scorer = <country_scorer>
	## cardinality = 0..1
	var = value_set[variable]
}

###Calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays.
## scopes = { COUNTRY }
alias[trigger:get_sorted_scored_countries_temp] = {
	scorer = <country_scorer>
	## cardinality = 0..1
	array = value_set[array]
	## cardinality = 0..1
	scores = value_set[array]
}

###Checks decryption ratio against a country.
## scopes = { COUNTRY }
alias[trigger:decryption_progress] = {
	target = enum[country_tags]
	target = scope[country]
	value = variable_field
}

###Check if any any occupied meets the trigger. tooltip=key can be defined to override title.
## scopes = { COUNTRY }
## push_scope = country
alias[trigger:any_occupied_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}


###Check if all occupied countries meets the trigger. tooltip=key can be defined to override title.
## scopes = { COUNTRY }
## push_scope = country
alias[trigger:all_occupied_country] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

###Check if any country with current scope's original tag meets the trigger.
## scopes = { any }
alias[trigger:any_country_with_original_tag] = {
	original_tag_to_check = enum[country_tags]
	original_tag_to_check = scope[country]
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}


###Check if all country with current scope's original tag meets the trigger.
## scopes = { any }
alias[trigger:all_country_with_original_tag] = {
	original_tag_to_check = enum[country_tags]
	original_tag_to_check = scope[country]
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

###Has country done this intelligence agency upgrade (to its highest level).
## scopes = { COUNTRY }
alias[trigger:has_done_agency_upgrade] = <intelligence_agency_upgrade>

###Check if country is Spy Master.
## scopes = { COUNTRY }
alias[trigger:is_spymaster] = bool

###Check the amount of foreign garrison manpower we have.
## scopes = { COUNTRY }
alias[trigger:foreign_manpower] = variable_field

###Check the amount of manpower needed by garrisons.
## scopes = { COUNTRY }
alias[trigger:garrison_manpower_need] = variable_field

###Checks the number of upgrade done in the intelligence agency.
## scopes = { COUNTRY }
alias[trigger:agency_upgrade_number] = variable_field

###Checks whether the operative is performing the given mission.
## scopes = { UNIT_LEADER }
alias[trigger:operative_leader_mission] = enum[operative_missions]

###Compare the intel of the scoped country with the specified one.
## scopes = { COUNTRY }
alias[trigger:compare_intel_with] = {
	target = enum[country_tags]
	target = scope[country]
	## cardinality = 0..1
	civilian_intel = variable_field
	## cardinality = 0..1
	army_intel = variable_field
	## cardinality = 0..1
    navy_intel = variable_field
}

###Check if all operatives meets the trigger. tooltip=key can be defined to override title.
## scopes = { COUNTRY OPERATION }
## push_scope = UNIT_LEADER
alias[trigger:all_operative_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

###Check if any operatives meets the trigger. tooltip=key can be defined to override title.
## scopes = { COUNTRY OPERATION }
## push_scope = UNIT_LEADER
alias[trigger:any_operative_leader] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

###Checks whether the operative has the matching captured status.
## scopes = { UNIT_LEADER }
alias[trigger:is_operative_captured] = bool

###Compare the absolute, percentage based, intel level the scoped country has over the specified one.
## scopes = { COUNTRY }
alias[trigger:intel_level_over] = {
	target = enum[country_tags]
	target = scope[country]
	## cardinality = 0..1
	civilian_intel = variable_field
	## cardinality = 0..1
	army_intel = variable_field
	## cardinality = 0..1
    navy_intel = variable_field
}

###Check if any of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title.
## scopes = { COUNTRY }
## push_scope = state
alias[trigger:any_controlled_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

###Check if all of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title.
## scopes = { COUNTRY }
## push_scope = state
alias[trigger:all_controlled_state] = {
	## cardinality = 0..1
	tooltip = localisation
	alias_name[trigger] = alias_match_left[trigger]
}

###Checks the number of operatives the country controls.
## scopes = { COUNTRY }
alias[trigger:num_of_operatives] = variable_field

###Checks the number of available operative slots a country has. If this differs from the number of operative, this does not mean the country can recruit an operative, but that it will eventually be able to.
## scopes = { COUNTRY }
alias[trigger:num_operative_slots] = variable_field

###Checks the number of operative a country can recruit right now. Note that this is not necessarily greater than zero if num_operative_slots returned a number greater than the number of operative.
## scopes = { COUNTRY }
alias[trigger:num_free_operative_slots] = variable_field

###Has country an active cryptology department.
## scopes = { COUNTRY }
alias[trigger:is_cryptology_department_active] = bool

###Checks if is currently decrypting a cipher.
## scopes = { COUNTRY }
alias[trigger:is_decrypting] = scope[country]

###Checks if is currently decrypting a cipher.
## scopes = { COUNTRY }
alias[trigger:is_decrypting] = enum[country_tags]

###Checks if fully decrypted a cipher.
## scopes = { COUNTRY }
alias[trigger:is_fully_decrypted] = scope[country]

###Checks if fully decrypted a cipher.
## scopes = { COUNTRY }
alias[trigger:is_fully_decrypted] = enum[country_tags]

###Checks if the country activated their active cipher decryption bonuses.
## scopes = { COUNTRY }
alias[trigger:is_active_decryption_bonuses_enabled] = scope[country]

###Checks if the country activated their active cipher decryption bonuses.
## scopes = { COUNTRY }
alias[trigger:is_active_decryption_bonuses_enabled] = enum[country_tags]

###Will compare towards the amount of fake intel divisions a country has control over.
## scopes = { COUNTRY }
alias[trigger:num_fake_intel_divisions] = variable_field

###Modulos a temp variable with another.
## scopes = { any }
alias[trigger:modulo_temp_variable] = {
	value_set[variable] = variable_field_32
}

###Modulos a temp variable with another.
## scopes = { any }
alias[trigger:modulo_temp_variable] = {
	var = value_set[variable]
	value = variable_field_32
}

###Check if any country with current scoped country guarantees.
## scopes = { COUNTRY }
## push_scope = country
alias[trigger:any_guaranteed_country] = {
	alias_name[trigger] = alias_match_left[trigger]
}


###Check if every country with current scoped country guarantees.
## scopes = { COUNTRY }
## push_scope = country
alias[trigger:all_guaranteed_country] = {
	alias_name[trigger] = alias_match_left[trigger]
}

###Compares number of completed operations.
## scopes = { COUNTRY }
alias[trigger:num_finished_operations] = {
	operation = <operation>
	operation = value_set[token]
	target = scope[country]
	value = int

}

###Checks the collaboration in a target country with our currently scoped country.
## scopes = { COUNTRY }
alias[trigger:has_collaboration] = {
	target = scope[country]
	target = enum[country_tags]
	value = variable_field
}

###Checks if running a specific operation. Operation can be omitted to check for any operation.
## scopes = { COUNTRY }
alias[trigger:is_running_operation] = {
	target = scope[country]
	operation = <operation>
}

###Checks if finished collecting of resources for an operation.
## scopes = { COUNTRY }
alias[trigger:has_finished_collecting_for_operation] = {
	target = scope[country]
	operation = <operation>
}

###Checks conscription ratio of the country compared to target conscription ratio.
## scopes = { COUNTRY }
alias[trigger:conscription_ratio] = variable_field

###Checks the target conscription amount of the country.
## scopes = { COUNTRY }
alias[trigger:target_conscription_amount] = variable_field

###Checks the current conscription amount of the country.
## scopes = { COUNTRY }
alias[trigger:current_conscription_amount] = variable_field

###Checks the type of operation.
## scopes = { OPERATION }
alias[trigger:is_operation_type] = <operation>

###Checks if preparing a specific operation.
## scopes = { COUNTRY }
alias[trigger:is_preparing_operation] = {
	operation = <operation>
	operation = variable_field
	target = scope[country]
}

###Checks whether the operative is performing the given operation.
## scopes = { UNIT_LEADER }
alias[trigger:operative_leader_operation] = <operation>

###Checks if the country could potentially declare a war on the target (according to game rules, relationship, etc... ).
## scopes = { COUNTRY }
alias[trigger:can_declare_war_on] = scope[country]

###Checks if the country could potentially declare a war on the target (according to game rules, relationship, etc... ).
## scopes = { COUNTRY }
alias[trigger:can_declare_war_on] = enum[country_tags]

###Checks whether the operative has the specified nationality. NOTE: this is invalid on non-operatives.
## scopes = { UNIT_LEADER }
alias[trigger:has_nationality] = scope[country]

###Checks whether the operative has the specified nationality. NOTE: this is invalid on non-operatives.
## scopes = { UNIT_LEADER }
alias[trigger:has_nationality] = enum[country_tags]

###Checks network national coverage you have over a country.
## scopes = { COUNTRY }
alias[trigger:network_national_coverage] = {
	target = enum[country_tags]
	target = scope[country]
	value = variable_field
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = variable_field

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = variable_field_32
	distribution = uniform
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = variable_field_32
	distribution = binomial
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = variable_field_32
	distribution = uniform
	min = variable_field_32
	max = variable_field_32
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = variable_field_32
	distribution = binomial
	min = variable_field_32
	max = variable_field_32
}

###Randomize a temporary variable.
## scopes = { any }
alias[effect:randomize_temp_variable] = {
	var = variable_field_32
	distribution = binomial
	## cardinality = 0..1
	min = variable_field_32
	lambda = variable_field_32
}

###Sets a temp variable to a random value.
## scopes = { any }
alias[effect:set_temp_variable_to_random] = value_set[variable]

###Sets a temp variable to a random value.
## scopes = { any }
alias[effect:set_temp_variable_to_random] = {
	var = value_set[variable]
	## cardinality = 0..1
	min = variable_field_32
	## cardinality = 0..1
	max = variable_field_32
	## cardinality = 0..1
	integer = bool
}

###Checks whether a state is impassable.
## scopes = { state }
alias[effect:impassable] = bool

###Number of researched technologies.
## scopes = { COUNTRY }
alias[effect:num_researched_technologies] = int_variable_field

###Checks if country has allowed ideas with specific traits more than limit.
## scopes = { COUNTRY }
alias[effect:has_allowed_idea_with_traits] = {
	idea = <country_leader_trait>
	idea = {
		## cardinality = 1..inf
		<country_leader_trait>
	}
	limit = int
	## cardinality = 0..1
	### # if specified, these ideas will be ignored.
	ignore = {
		enum[idea_name]
	}

	## cardinality = 0..1
	### # if specified, these ideas will be ignored.
	ignore = enum[idea_name]
}

###Is leading volunteers in the target.
## scopes = { UNIT_LEADER }
alias[effect:is_leading_volunteer_group] = scope[country]

###Is leading volunteers in the target.
## scopes = { UNIT_LEADER }
alias[effect:is_leading_volunteer_group] = enum[country_tags]

###Is leading volunteers in a country with the original tag.
## scopes = { UNIT_LEADER }
alias[effect:is_leading_volunteer_group_with_original_country] = scope[country]

###Is leading volunteers in a country with the original tag.
## scopes = { UNIT_LEADER }
alias[effect:is_leading_volunteer_group_with_original_country] = enum[country_tags]
